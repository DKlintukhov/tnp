{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ErrorBoundary } from '../components';\nimport { DBServiceContext } from '../App';\nimport { Products } from '../models';\nimport napkinsImg from '../assets/napkins.webp';\nimport toiletsImg from '../assets/toilets.webp';\nimport './ProductionPage.css';\nexport const ProductionPage = () => {\n  const [month, setMonth] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n  const {\n    product\n  } = useParams();\n  const dbService = useContext(DBServiceContext);\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setLoading(false);\n    })();\n  }, []);\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  };\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  };\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  };\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  };\n\n  const onChangeMonthConfirmed = (plan, days, ppr) => {\n    (async () => {\n      await dbService.updatePlan(product, plan);\n      await dbService.updateDays(product, days);\n      await dbService.updatePpr(product, ppr);\n      setChangeMonthModalOpened(false);\n    })();\n  };\n\n  const onCreateNewMonthConfirmed = async month => {\n    await dbService.addNewMonth(month.product, month.plan, month.days, 0);\n    setModalOpened(false);\n  };\n\n  const imgSrc = product === Products.toilets ? toiletsImg : napkinsImg;\n\n  const spinner = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ErrorBoundary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx"],"names":["React","useState","useEffect","useContext","useParams","ErrorBoundary","DBServiceContext","Products","napkinsImg","toiletsImg","ProductionPage","month","setMonth","loading","setLoading","modalOpened","setModalOpened","changeMonthModalOpened","setChangeMonthModalOpened","product","dbService","m","getMonth","onModalToggle","onCreateNewMonthCanceled","onChangeMonthModalToggle","onChangeMonthCanceled","onChangeMonthConfirmed","plan","days","ppr","updatePlan","updateDays","updatePpr","onCreateNewMonthConfirmed","addNewMonth","imgSrc","toilets","spinner"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAAeC,SAAf,QAAgC,kBAAhC;AAEA,SAASC,aAAT,QAA8B,eAA9B;AAGA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAAoBC,QAApB,QAAoC,WAApC;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,sBAAP;AAGA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACgB,sBAAD,EAAyBC,yBAAzB,IAAsDjB,QAAQ,CAAC,KAAD,CAApE;AAGA,QAAM;AAACkB,IAAAA;AAAD,MAAYf,SAAS,EAA3B;AACA,QAAMgB,SAAS,GAAGjB,UAAU,CAACG,gBAAD,CAA5B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMmB,CAAC,GAAG,MAAMD,SAAS,CAACE,QAAV,CAAmBH,OAAnB,CAAhB;AACAP,MAAAA,QAAQ,CAACS,CAAD,CAAR;AACAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD;AAKD,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMS,aAAa,GAAG,MAAM;AAC1BP,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAIA,QAAMS,wBAAwB,GAAG,MAAM;AACrCR,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,QAAMS,wBAAwB,GAAG,MAAM;AACrCP,IAAAA,yBAAyB,CAAC,CAACD,sBAAF,CAAzB;AACD,GAFD;;AAIA,QAAMS,qBAAqB,GAAG,MAAM;AAClCR,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GAFD;;AAIA,QAAMS,sBAAsB,GAAG,CAACC,IAAD,EAAeC,IAAf,EAA6BC,GAA7B,KAA6C;AAC1E,KAAC,YAAY;AACX,YAAMV,SAAS,CAACW,UAAV,CAAqBZ,OAArB,EAA8BS,IAA9B,CAAN;AACA,YAAMR,SAAS,CAACY,UAAV,CAAqBb,OAArB,EAA8BU,IAA9B,CAAN;AACA,YAAMT,SAAS,CAACa,SAAV,CAAoBd,OAApB,EAA6BW,GAA7B,CAAN;AACAZ,MAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,KALD;AAMD,GAPD;;AASA,QAAMgB,yBAAyB,GAAG,MAAOvB,KAAP,IAA4B;AAC5D,UAAMS,SAAS,CAACe,WAAV,CAAsBxB,KAAK,CAACQ,OAA5B,EAAqCR,KAAK,CAACiB,IAA3C,EAAiDjB,KAAK,CAACkB,IAAvD,EAA6D,CAA7D,CAAN;AACAb,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAHD;;AAKA,QAAMoB,MAAM,GAAGjB,OAAO,KAAKZ,QAAQ,CAAC8B,OAArB,GAA+B5B,UAA/B,GAA4CD,UAA3D;;AACA,QAAM8B,OAAO,GAAG,MAAM;AACpB,wBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAID,GALD;;AAMA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CA5DM","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { ErrorBoundary } from '../components';\nimport Button from '@material-ui/core/Button';\n\nimport { DBServiceContext } from '../App';\nimport { WorkMonth, Products } from '../models';\n\nimport napkinsImg from '../assets/napkins.webp';\nimport toiletsImg from '../assets/toilets.webp';\nimport './ProductionPage.css';\n\n\nexport const ProductionPage = () => {\n  const [month, setMonth] = useState({} as WorkMonth);\n  const [loading, setLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n\n\n  const {product} = useParams();\n  const dbService = useContext(DBServiceContext);\n\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setLoading(false);\n    })();\n  }, [])\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  }\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  }\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  }\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  }\n\n  const onChangeMonthConfirmed = (plan: number, days: number, ppr: number) => {\n    (async () => {\n      await dbService.updatePlan(product, plan);\n      await dbService.updateDays(product, days);\n      await dbService.updatePpr(product, ppr);\n      setChangeMonthModalOpened(false);\n    })();\n  }\n\n  const onCreateNewMonthConfirmed = async (month: WorkMonth) => {\n    await dbService.addNewMonth(month.product, month.plan, month.days, 0);\n    setModalOpened(false);\n  }\n\n  const imgSrc = product === Products.toilets ? toiletsImg : napkinsImg;\n  const spinner = () => {\n    return (\n      <div className=\"spinner-container\">\n      </div>\n      )\n  }\n  return (\n    <ErrorBoundary>\n\n    </ErrorBoundary>\n    );\n}"]},"metadata":{},"sourceType":"module"}
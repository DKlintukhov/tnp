{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx\";\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nexport const ProductionTable = props => {\n  const {\n    month\n  } = props;\n  return /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 14\n    }\n  }, \"Dessert (100g serving)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 14\n    }\n  }, \"Calories\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 14\n    }\n  }, \"Fat\\xA0(g)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 14\n    }\n  }, \"Carbs\\xA0(g)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }\n  }, \"Protein\\xA0(g)\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }\n  }, rows.map(row => /*#__PURE__*/React.createElement(TableRow, {\n    key: row.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }\n  }, row.name), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }\n  }, row.calories), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }\n  }, row.fat), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }\n  }, row.carbs), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }\n  }, row.protein))))));\n}; // const getKForToilets = (avg: number) => {\n//   if (avg > 22700 && avg < 26000) {\n//     return 1.1;\n//   }\n//   if (avg > 26000 && avg < 27000) {\n//     return 1.2;\n//   }\n//   if (avg > 27000) {\n//     return 1.25;\n//   }\n//   return 1.0;\n// }\n// const getKForNapkins = (avg: number) => {\n//   if (avg > 2100 && avg < 2401) {\n//     return 1.1;\n//   }\n//   if (avg > 2400 && avg < 2501) {\n//     return 1.2;\n//   }\n//   if (avg > 2500) {\n//     return 1.25;\n//   }\n//   return 1.0;\n// }\n//   const onWorkDayChange = (day: number) => {\n//     return async (amount: string) => {\n//       const m = {...month};\n//       m.workDays[day].amount = + amount || 0;\n//       setMonth(m);\n//       remainToDoChanged(m);\n//       avgChanged(m);\n//       avgWithPprChanged(m);\n//       onNeedsToDoChange(m);\n//       onKChange(m);\n//       await dbService.updateDay(product, day, + amount)\n//     }\n//   }\n//   const remainToDoChanged = (m: WorkMonth) => {\n//     const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     setRemainToDo(res > 0 ? res : 0);\n//   }\n//   const onPlanChange = async (p: string) => {\n//     await dbService.updatePlan(product, + p);\n//     const m = {...month};\n//     m.plan = + p;\n//     setMonth(m);\n//     remainToDoChanged(m);\n//   }\n//   const avgChanged = (m: WorkMonth) => {\n//     let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     res = Math.round(res / (finished || 1));\n//     setAvg(res);\n//   }\n//   const avgWithPprChanged = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(\n//       m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n//       );\n//     setAvgWithPpr(avg);\n//   }\n//   const onPprChange = async (p: string) => {\n//     await dbService.updatePpr(product, + p);\n//     const m = {...month};\n//     m.ppr = + p;\n//     setMonth(m);\n//     avgWithPprChanged(m);\n//     onKChange(m);\n//   }\n//   const onNeedsToDoChange = (m: WorkMonth) => {\n//     const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const res = Math.round(remainToDo / ((m.days - finished) || 1));\n//     setNeedsToDo(res > 0 ? res : 0);\n//   }\n//   const onKChange = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n//     if (m.product === Products.napkins)\n//       setK(getKForNapkins(avg));\n//     if (m.product === Products.toilets)\n//       setK(getKForToilets(avg));\n//   }\n//   const onDaysChange = async (days: String) => {\n//     await dbService.updateDays(product, + days);\n//     const m = {...month};\n//     m.days = + days;\n//     m.workDays = m.workDays.slice(0, + days);\n//     updateAllData(m);\n//   }\n//   const onAddNewDay = async () => {\n//     const m = {...month};\n//     const day = m.workDays?.length || 0;\n//     m.workDays?.push({\n//       day,\n//       amount: 0\n//     });\n//     await dbService.addWorkDay(product, day, 0);\n//     updateAllData(m);\n//   }\n//   const onDeleteDay = (id: number) => {\n//     return async () => {\n//       const m = {...month};\n//       const day = m.workDays.length;\n//       m.workDays.pop();\n//       await dbService.deleteWorkDay(product, day);\n//       updateAllData(m);\n//     }\n//   }\n//   const updateAllData = (m: WorkMonth) => {\n//     setMonth(m);\n//     remainToDoChanged(m);\n//     avgChanged(m);\n//     avgWithPprChanged(m);\n//     onNeedsToDoChange(m);\n//     onKChange(m);\n//   }","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx"],"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","ProductionTable","props","month","classes","table","rows","map","row","name","calories","fat","carbs","protein"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAMA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAkB;AAChD,QAAM;AAACC,IAAAA;AAAD,MAAUD,KAAhB;AACA,sBACC,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEF,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEI,OAAO,CAACC,KAA1B;AAAiC,kBAAW,cAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,eAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,CADF,CADF,eAUE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,GAAL,CAAUC,GAAD,iBACR,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,GAAG,CAACC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,IAArB;AAA0B,IAAA,KAAK,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,GAAG,CAACC,IADP,CADF,eAIE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BD,GAAG,CAACE,QAA9B,CAJF,eAKE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BF,GAAG,CAACG,GAA9B,CALF,eAME,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BH,GAAG,CAACI,KAA9B,CANF,eAOE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BJ,GAAG,CAACK,OAA9B,CAPF,CADD,CADH,CAVF,CADL,CADD;AA4BA,CA9BM,C,CAisourcesContent":["import React, { useState } from 'react';\n\nimport { WorkMonth } from '../../models';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper'\n\ninterface Props {\n\tmonth: WorkMonth;\n}\n\nexport const ProductionTable = (props: Props) => {\n\tconst {month} = props;\n\treturn (\n\t\t<TableContainer component={Paper}>\n\t      <Table className={classes.table} aria-label=\"simple table\">\n\t        <TableHead>\n\t          <TableRow>\n\t            <TableCell>Dessert (100g serving)</TableCell>\n\t            <TableCell align=\"right\">Calories</TableCell>\n\t            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n\t            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n\t            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n\t          </TableRow>\n\t        </TableHead>\n\t        <TableBody>\n\t          {rows.map((row) => (\n\t            <TableRow key={row.name}>\n\t              <TableCell component=\"th\" scope=\"row\">\n\t                {row.name}\n\t              </TableCell>\n\t              <TableCell align=\"right\">{row.calories}</TableCell>\n\t              <TableCell align=\"right\">{row.fat}</TableCell>\n\t              <TableCell align=\"right\">{row.carbs}</TableCell>\n\t              <TableCell align=\"right\">{row.protein}</TableCell>\n\t            </TableRow>\n\t          ))}\n\t        </TableBody>\n\t      </Table>\n\t    </TableContainer>\n\t)\n}\n\n\n// const getKForToilets = (avg: number) => {\n//   if (avg > 22700 && avg < 26000) {\n//     return 1.1;\n//   }\n\n//   if (avg > 26000 && avg < 27000) {\n//     return 1.2;\n//   }\n\n//   if (avg > 27000) {\n//     return 1.25;\n//   }\n\n//   return 1.0;\n// }\n\n// const getKForNapkins = (avg: number) => {\n//   if (avg > 2100 && avg < 2401) {\n//     return 1.1;\n//   }\n//   if (avg > 2400 && avg < 2501) {\n//     return 1.2;\n//   }\n\n//   if (avg > 2500) {\n//     return 1.25;\n//   }\n\n//   return 1.0;\n// }\n\n\n//   const onWorkDayChange = (day: number) => {\n//     return async (amount: string) => {\n//       const m = {...month};\n//       m.workDays[day].amount = + amount || 0;\n\n//       setMonth(m);\n//       remainToDoChanged(m);\n//       avgChanged(m);\n//       avgWithPprChanged(m);\n//       onNeedsToDoChange(m);\n//       onKChange(m);\n//       await dbService.updateDay(product, day, + amount)\n//     }\n//   }\n\n//   const remainToDoChanged = (m: WorkMonth) => {\n//     const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     setRemainToDo(res > 0 ? res : 0);\n//   }\n\n//   const onPlanChange = async (p: string) => {\n//     await dbService.updatePlan(product, + p);\n//     const m = {...month};\n//     m.plan = + p;\n//     setMonth(m);\n//     remainToDoChanged(m);\n//   }\n\n//   const avgChanged = (m: WorkMonth) => {\n//     let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     res = Math.round(res / (finished || 1));\n//     setAvg(res);\n//   }\n\n//   const avgWithPprChanged = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(\n//       m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n//       );\n//     setAvgWithPpr(avg);\n//   }\n\n//   const onPprChange = async (p: string) => {\n//     await dbService.updatePpr(product, + p);\n//     const m = {...month};\n//     m.ppr = + p;\n//     setMonth(m);\n//     avgWithPprChanged(m);\n//     onKChange(m);\n//   }\n\n//   const onNeedsToDoChange = (m: WorkMonth) => {\n//     const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const res = Math.round(remainToDo / ((m.days - finished) || 1));\n//     setNeedsToDo(res > 0 ? res : 0);\n//   }\n\n//   const onKChange = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n//     if (m.product === Products.napkins)\n//       setK(getKForNapkins(avg));\n\n//     if (m.product === Products.toilets)\n//       setK(getKForToilets(avg));\n//   }\n\n//   const onDaysChange = async (days: String) => {\n//     await dbService.updateDays(product, + days);\n//     const m = {...month};\n//     m.days = + days;\n//     m.workDays = m.workDays.slice(0, + days);\n//     updateAllData(m);\n//   }\n\n//   const onAddNewDay = async () => {\n//     const m = {...month};\n//     const day = m.workDays?.length || 0;\n//     m.workDays?.push({\n//       day,\n//       amount: 0\n//     });\n//     await dbService.addWorkDay(product, day, 0);\n//     updateAllData(m);\n//   }\n\n//   const onDeleteDay = (id: number) => {\n//     return async () => {\n//       const m = {...month};\n//       const day = m.workDays.length;\n//       m.workDays.pop();\n//       await dbService.deleteWorkDay(product, day);\n//       updateAllData(m);\n//     }\n//   }\n\n//   const updateAllData = (m: WorkMonth) => {\n//     setMonth(m);\n//     remainToDoChanged(m);\n//     avgChanged(m);\n//     avgWithPprChanged(m);\n//     onNeedsToDoChange(m);\n//     onKChange(m);\n//   }"]},"metadata":{},"sourceType":"module"}
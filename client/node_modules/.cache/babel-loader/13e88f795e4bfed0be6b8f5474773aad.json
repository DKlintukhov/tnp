{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Button, BtnTypes, ErrorBoundary, ProductionTable, Spinner, Modal, NewMonthForm, ChangeMonthForm } from '../components';\nimport { DBServiceContext } from '../App';\nimport { Products } from '../models';\nimport napkinsImg from '../assets/napkins.webp';\nimport toiletsImg from '../assets/toilets.webp';\nimport './ProductionPage.css';\nexport const ProductionPage = () => {\n  const [month, setMonth] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n  const {\n    product\n  } = useParams();\n  const dbService = useContext(DBServiceContext);\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setLoading(false);\n    })();\n  }, []);\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  };\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  };\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  };\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  };\n\n  const onChangeMonthConfirmed = async (plan, days) => {\n    await dbService.updatePlan(product, plan);\n    await dbService.updateDays(product, days);\n    setChangeMonthModalOpened(false);\n  };\n\n  const onCreateNewMonthConfirmed = async month => {\n    await dbService.createMonth(month.product, month.plan, month.days);\n    setModalOpened(false);\n  };\n\n  const imgSrc = product === Products.toilets ? toiletsImg : napkinsImg;\n\n  const spinner = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      imgSrc: imgSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(ErrorBoundary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, loading ? spinner() : /*#__PURE__*/React.createElement(\"section\", {\n    className: \"production-page__container\",\n    \"data-theme\": \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    className: \"navigation__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"navigation-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: 'Назад',\n    type: BtnTypes.warn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 28\n    }\n  }))), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"navigation-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: 'Новый месяц',\n    clicked: onModalToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"navigation-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: 'Изменить месяц',\n    clicked: onChangeMonthModalToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(ProductionTable, {\n    month: month,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    opened: modalOpened,\n    children: /*#__PURE__*/React.createElement(NewMonthForm, {\n      canceled: onCreateNewMonthCanceled,\n      confirmed: onCreateNewMonthConfirmed,\n      product: product,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }),\n    closed: onCreateNewMonthCanceled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    opened: changeMonthModalOpened,\n    children: /*#__PURE__*/React.createElement(ChangeMonthForm, {\n      canceled: onChangeMonthCanceled,\n      confirmed: onChangeMonthConfirmed,\n      month: month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 23\n      }\n    }),\n    closed: onChangeMonthCanceled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx"],"names":["React","useState","useEffect","useContext","Link","useParams","Button","BtnTypes","ErrorBoundary","ProductionTable","Spinner","Modal","NewMonthForm","ChangeMonthForm","DBServiceContext","Products","napkinsImg","toiletsImg","ProductionPage","month","setMonth","loading","setLoading","modalOpened","setModalOpened","changeMonthModalOpened","setChangeMonthModalOpened","product","dbService","m","getMonth","onModalToggle","onCreateNewMonthCanceled","onChangeMonthModalToggle","onChangeMonthCanceled","onChangeMonthConfirmed","plan","days","updatePlan","updateDays","onCreateNewMonthConfirmed","createMonth","imgSrc","toilets","spinner","warn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AAEA,SACEC,MADF,EAEEC,QAFF,EAKEC,aALF,EAMEC,eANF,EAOEC,OAPF,EAQEC,KARF,EASEC,YATF,EAUEC,eAVF,QAWO,eAXP;AAaA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAAoBC,QAApB,QAAoC,WAApC;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,sBAAP;AAGA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACwB,sBAAD,EAAyBC,yBAAzB,IAAsDzB,QAAQ,CAAC,KAAD,CAApE;AAGA,QAAM;AAAC0B,IAAAA;AAAD,MAAYtB,SAAS,EAA3B;AACA,QAAMuB,SAAS,GAAGzB,UAAU,CAACW,gBAAD,CAA5B;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACX,YAAM2B,CAAC,GAAG,MAAMD,SAAS,CAACE,QAAV,CAAmBH,OAAnB,CAAhB;AACAP,MAAAA,QAAQ,CAACS,CAAD,CAAR;AACAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD;AAKH,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMS,aAAa,GAAG,MAAM;AAC1BP,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAIA,QAAMS,wBAAwB,GAAG,MAAM;AACrCR,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,QAAMS,wBAAwB,GAAG,MAAM;AACrCP,IAAAA,yBAAyB,CAAC,CAACD,sBAAF,CAAzB;AACD,GAFD;;AAIA,QAAMS,qBAAqB,GAAG,MAAM;AAClCR,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GAFD;;AAIA,QAAMS,sBAAsB,GAAG,OAAOC,IAAP,EAAqBC,IAArB,KAAsC;AACnE,UAAMT,SAAS,CAACU,UAAV,CAAqBX,OAArB,EAA8BS,IAA9B,CAAN;AACA,UAAMR,SAAS,CAACW,UAAV,CAAqBZ,OAArB,EAA8BU,IAA9B,CAAN;AACAX,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GAJD;;AAMA,QAAMc,yBAAyB,GAAG,MAAOrB,KAAP,IAA4B;AAC5D,UAAMS,SAAS,CAACa,WAAV,CAAsBtB,KAAK,CAACQ,OAA5B,EAAqCR,KAAK,CAACiB,IAA3C,EAAiDjB,KAAK,CAACkB,IAAvD,CAAN;AACAb,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAHD;;AAKA,QAAMkB,MAAM,GAAGf,OAAO,KAAKZ,QAAQ,CAAC4B,OAArB,GAA+B1B,UAA/B,GAA4CD,UAA3D;;AACA,QAAM4B,OAAO,GAAG,MAAM;AACpB,wBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAS,MAAA,MAAM,EAAEF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GAND;;AAOA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEErB,OAAO,GACLuB,OAAO,EADF,gBAEL;AAAS,IAAA,SAAS,EAAC,4BAAnB;AAAgD,kBAAW,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAa,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,OAAd;AAAuB,IAAA,IAAI,EAAErC,QAAQ,CAACsC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAb,CADF,CADF,eAIE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,aAAd;AAA6B,IAAA,OAAO,EAAEd,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,eAOE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,gBAAd;AAAgC,IAAA,OAAO,EAAEE,wBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CADF,eAaE,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEd,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CAJJ,eAqBE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEI,WAAf;AACM,IAAA,QAAQ,eAAE,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAES,wBAAxB;AACc,MAAA,SAAS,EAAEQ,yBADzB;AAEc,MAAA,OAAO,EAAEb,OAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADhB;AAIM,IAAA,MAAM,EAAEK,wBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,eA2BE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEP,sBAAf;AACM,IAAA,QAAQ,eAAE,oBAAC,eAAD;AAAiB,MAAA,QAAQ,EAAES,qBAA3B;AACgB,MAAA,SAAS,EAAEC,sBAD3B;AAEgB,MAAA,KAAK,EAAEhB,KAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADhB;AAIM,IAAA,MAAM,EAAEe,qBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF;AAmCD,CAxFM","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { \n  Button, \n  BtnTypes, \n  Menu, \n  MenuItem, \n  ErrorBoundary, \n  ProductionTable,\n  Spinner,\n  Modal,\n  NewMonthForm,\n  ChangeMonthForm\n} from '../components';\n\nimport { DBServiceContext } from '../App';\nimport { WorkMonth, Products } from '../models';\n\nimport napkinsImg from '../assets/napkins.webp';\nimport toiletsImg from '../assets/toilets.webp';\nimport './ProductionPage.css';\n\n\nexport const ProductionPage = () => {\n  const [month, setMonth] = useState({} as WorkMonth);\n  const [loading, setLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n\n\n  const {product} = useParams();\n  const dbService = useContext(DBServiceContext);\n\n  useEffect(() => {\n      (async () => {\n        const m = await dbService.getMonth(product);\n        setMonth(m);\n        setLoading(false);\n      })();\n  }, [])\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  }\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  }\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  }\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  }\n\n  const onChangeMonthConfirmed = async (plan: number, days: number) => {\n    await dbService.updatePlan(product, plan);\n    await dbService.updateDays(product, days);\n    setChangeMonthModalOpened(false);\n  }\n\n  const onCreateNewMonthConfirmed = async (month: WorkMonth) => {\n    await dbService.createMonth(month.product, month.plan, month.days);\n    setModalOpened(false);\n  }\n\n  const imgSrc = product === Products.toilets ? toiletsImg : napkinsImg;\n  const spinner = () => {\n    return (\n      <div className=\"spinner-container\">\n        <Spinner imgSrc={imgSrc}/> \n      </div>\n    )\n  }\n \treturn (\n    <ErrorBoundary>\n    {\n      loading \n      ? spinner()\n      : <section className=\"production-page__container\" data-theme=\"light\">\n          <nav className=\"navigation__container\">\n            <li className=\"navigation-item\">\n              <Link to=\"/\"><Button text={'Назад'} type={BtnTypes.warn}/></Link>\n            </li>\n            <li className=\"navigation-item\">\n              <Button text={'Новый месяц'} clicked={onModalToggle}/>\n            </li>\n            <li className=\"navigation-item\">\n              <Button text={'Изменить месяц'} clicked={onChangeMonthModalToggle}/>\n            </li>\n          </nav>\n\n          <ProductionTable month={month}/>\n        </section>\n    }\n\n      <Modal opened={modalOpened} \n            children={<NewMonthForm canceled={onCreateNewMonthCanceled} \n                                    confirmed={onCreateNewMonthConfirmed} \n                                    product={product} />} \n            closed={onCreateNewMonthCanceled}/>\n\n      <Modal opened={changeMonthModalOpened} \n            children={<ChangeMonthForm canceled={onChangeMonthCanceled} \n                                      confirmed={onChangeMonthConfirmed} \n                                      month={month} />} \n            closed={onChangeMonthCanceled} />\n    </ErrorBoundary>\n  );\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx\";\nimport React from 'react';\nexport const ProductionTable = props => {\n  const {\n    month\n  } = props;\n  return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 3\n    }\n  }, \"TABLE\");\n}; // const getKForToilets = (avg: number) => {\n//   if (avg > 22700 && avg < 26000) {\n//     return 1.1;\n//   }\n//   if (avg > 26000 && avg < 27000) {\n//     return 1.2;\n//   }\n//   if (avg > 27000) {\n//     return 1.25;\n//   }\n//   return 1.0;\n// }\n// const getKForNapkins = (avg: number) => {\n//   if (avg > 2100 && avg < 2401) {\n//     return 1.1;\n//   }\n//   if (avg > 2400 && avg < 2501) {\n//     return 1.2;\n//   }\n//   if (avg > 2500) {\n//     return 1.25;\n//   }\n//   return 1.0;\n// }\n//   const onWorkDayChange = (day: number) => {\n//     return async (amount: string) => {\n//       const m = {...month};\n//       m.workDays[day].amount = + amount || 0;\n//       setMonth(m);\n//       remainToDoChanged(m);\n//       avgChanged(m);\n//       avgWithPprChanged(m);\n//       onNeedsToDoChange(m);\n//       onKChange(m);\n//       await dbService.updateDay(product, day, + amount)\n//     }\n//   }\n//   const remainToDoChanged = (m: WorkMonth) => {\n//     const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     setRemainToDo(res > 0 ? res : 0);\n//   }\n//   const onPlanChange = async (p: string) => {\n//     await dbService.updatePlan(product, + p);\n//     const m = {...month};\n//     m.plan = + p;\n//     setMonth(m);\n//     remainToDoChanged(m);\n//   }\n//   const avgChanged = (m: WorkMonth) => {\n//     let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     res = Math.round(res / (finished || 1));\n//     setAvg(res);\n//   }\n//   const avgWithPprChanged = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(\n//       m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n//       );\n//     setAvgWithPpr(avg);\n//   }\n//   const onPprChange = async (p: string) => {\n//     await dbService.updatePpr(product, + p);\n//     const m = {...month};\n//     m.ppr = + p;\n//     setMonth(m);\n//     avgWithPprChanged(m);\n//     onKChange(m);\n//   }\n//   const onNeedsToDoChange = (m: WorkMonth) => {\n//     const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const res = Math.round(remainToDo / ((m.days - finished) || 1));\n//     setNeedsToDo(res > 0 ? res : 0);\n//   }\n//   const onKChange = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n//     if (m.product === Products.napkins)\n//       setK(getKForNapkins(avg));\n//     if (m.product === Products.toilets)\n//       setK(getKForToilets(avg));\n//   }\n//   const onDaysChange = async (days: String) => {\n//     await dbService.updateDays(product, + days);\n//     const m = {...month};\n//     m.days = + days;\n//     m.workDays = m.workDays.slice(0, + days);\n//     updateAllData(m);\n//   }\n//   const onAddNewDay = async () => {\n//     const m = {...month};\n//     const day = m.workDays?.length || 0;\n//     m.workDays?.push({\n//       day,\n//       amount: 0\n//     });\n//     await dbService.addWorkDay(product, day, 0);\n//     updateAllData(m);\n//   }\n//   const onDeleteDay = (id: number) => {\n//     return async () => {\n//       const m = {...month};\n//       const day = m.workDays.length;\n//       m.workDays.pop();\n//       await dbService.deleteWorkDay(product, day);\n//       updateAllData(m);\n//     }\n//   }\n//   const updateAllData = (m: WorkMonth) => {\n//     setMonth(m);\n//     remainToDoChanged(m);\n//     avgChanged(m);\n//     avgWithPprChanged(m);\n//     onNeedsToDoChange(m);\n//     onKChange(m);\n//   }","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx"],"names":["React","ProductionTable","props","month"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAQA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAkB;AAChD,QAAM;AAACC,IAAAA;AAAD,MAAUD,KAAhB;AACA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,asourcesContent":["import React, { useState } from 'react';\n\nimport { WorkMonth } from '../../models';\n\ninterface Props {\n\tmonth: WorkMonth;\n}\n\nexport const ProductionTable = (props: Props) => {\n\tconst {month} = props;\n\treturn (\n\t\t<h2>TABLE</h2>\n\t)\n}\n\n\n// const getKForToilets = (avg: number) => {\n//   if (avg > 22700 && avg < 26000) {\n//     return 1.1;\n//   }\n\n//   if (avg > 26000 && avg < 27000) {\n//     return 1.2;\n//   }\n\n//   if (avg > 27000) {\n//     return 1.25;\n//   }\n\n//   return 1.0;\n// }\n\n// const getKForNapkins = (avg: number) => {\n//   if (avg > 2100 && avg < 2401) {\n//     return 1.1;\n//   }\n//   if (avg > 2400 && avg < 2501) {\n//     return 1.2;\n//   }\n\n//   if (avg > 2500) {\n//     return 1.25;\n//   }\n\n//   return 1.0;\n// }\n\n\n//   const onWorkDayChange = (day: number) => {\n//     return async (amount: string) => {\n//       const m = {...month};\n//       m.workDays[day].amount = + amount || 0;\n\n//       setMonth(m);\n//       remainToDoChanged(m);\n//       avgChanged(m);\n//       avgWithPprChanged(m);\n//       onNeedsToDoChange(m);\n//       onKChange(m);\n//       await dbService.updateDay(product, day, + amount)\n//     }\n//   }\n\n//   const remainToDoChanged = (m: WorkMonth) => {\n//     const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     setRemainToDo(res > 0 ? res : 0);\n//   }\n\n//   const onPlanChange = async (p: string) => {\n//     await dbService.updatePlan(product, + p);\n//     const m = {...month};\n//     m.plan = + p;\n//     setMonth(m);\n//     remainToDoChanged(m);\n//   }\n\n//   const avgChanged = (m: WorkMonth) => {\n//     let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     res = Math.round(res / (finished || 1));\n//     setAvg(res);\n//   }\n\n//   const avgWithPprChanged = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(\n//       m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n//       );\n//     setAvgWithPpr(avg);\n//   }\n\n//   const onPprChange = async (p: string) => {\n//     await dbService.updatePpr(product, + p);\n//     const m = {...month};\n//     m.ppr = + p;\n//     setMonth(m);\n//     avgWithPprChanged(m);\n//     onKChange(m);\n//   }\n\n//   const onNeedsToDoChange = (m: WorkMonth) => {\n//     const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const res = Math.round(remainToDo / ((m.days - finished) || 1));\n//     setNeedsToDo(res > 0 ? res : 0);\n//   }\n\n//   const onKChange = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n//     if (m.product === Products.napkins)\n//       setK(getKForNapkins(avg));\n\n//     if (m.product === Products.toilets)\n//       setK(getKForToilets(avg));\n//   }\n\n//   const onDaysChange = async (days: String) => {\n//     await dbService.updateDays(product, + days);\n//     const m = {...month};\n//     m.days = + days;\n//     m.workDays = m.workDays.slice(0, + days);\n//     updateAllData(m);\n//   }\n\n//   const onAddNewDay = async () => {\n//     const m = {...month};\n//     const day = m.workDays?.length || 0;\n//     m.workDays?.push({\n//       day,\n//       amount: 0\n//     });\n//     await dbService.addWorkDay(product, day, 0);\n//     updateAllData(m);\n//   }\n\n//   const onDeleteDay = (id: number) => {\n//     return async () => {\n//       const m = {...month};\n//       const day = m.workDays.length;\n//       m.workDays.pop();\n//       await dbService.deleteWorkDay(product, day);\n//       updateAllData(m);\n//     }\n//   }\n\n//   const updateAllData = (m: WorkMonth) => {\n//     setMonth(m);\n//     remainToDoChanged(m);\n//     avgChanged(m);\n//     avgWithPprChanged(m);\n//     onNeedsToDoChange(m);\n//     onKChange(m);\n//   }"]},"metadata":{},"sourceType":"module"}
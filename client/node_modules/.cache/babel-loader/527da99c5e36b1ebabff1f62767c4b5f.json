{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { //Button, \nErrorBoundary, ProductionTable, Spinner, Modal, NewMonthForm, ChangeMonthForm } from '../components';\nimport Button from '@material-ui/core/Button';\nimport { DBServiceContext } from '../App';\nimport { Products } from '../models';\nimport napkinsImg from '../assets/napkins.webp';\nimport toiletsImg from '../assets/toilets.webp';\nimport './ProductionPage.css';\nexport const ProductionPage = () => {\n  const [month, setMonth] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n  const {\n    product\n  } = useParams();\n  const dbService = useContext(DBServiceContext);\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setLoading(false);\n    })();\n  }, []);\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  };\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  };\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  };\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  };\n\n  const onChangeMonthConfirmed = (plan, days, ppr) => {\n    (async () => {\n      await dbService.updatePlan(product, plan);\n      await dbService.updateDays(product, days);\n      await dbService.updatePpr(product, ppr);\n      setChangeMonthModalOpened(false);\n    })();\n  };\n\n  const onCreateNewMonthConfirmed = async month => {\n    await dbService.addNewMonth(month.product, month.plan, month.days, 0);\n    setModalOpened(false);\n  };\n\n  const imgSrc = product === Products.toilets ? toiletsImg : napkinsImg;\n\n  const spinner = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      imgSrc: imgSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(ErrorBoundary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, loading ? spinner() : /*#__PURE__*/React.createElement(\"section\", {\n    className: \"production-page__container\",\n    \"data-theme\": \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    className: \"navigation__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"navigation-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"navigation-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"default\",\n    onClick: onModalToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043C\\u0435\\u0441\\u044F\\u0446\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"navigation-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"default\",\n    onClick: onChangeMonthModalToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u043C\\u0435\\u0441\\u044F\\u0446\"))), /*#__PURE__*/React.createElement(ProductionTable, {\n    month: month,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    opened: modalOpened,\n    children: /*#__PURE__*/React.createElement(NewMonthForm, {\n      canceled: onCreateNewMonthCanceled,\n      confirmed: onCreateNewMonthConfirmed,\n      product: product,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    }),\n    closed: onCreateNewMonthCanceled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    opened: changeMonthModalOpened,\n    children: /*#__PURE__*/React.createElement(ChangeMonthForm, {\n      canceled: onChangeMonthCanceled,\n      confirmed: onChangeMonthConfirmed,\n      month: month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }),\n    closed: onChangeMonthCanceled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }));\n};","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx"],"names":["React","useState","useEffect","useContext","useParams","ErrorBoundary","ProductionTable","Spinner","Modal","NewMonthForm","ChangeMonthForm","Button","DBServiceContext","Products","napkinsImg","toiletsImg","ProductionPage","month","setMonth","loading","setLoading","modalOpened","setModalOpened","changeMonthModalOpened","setChangeMonthModalOpened","product","dbService","m","getMonth","onModalToggle","onCreateNewMonthCanceled","onChangeMonthModalToggle","onChangeMonthCanceled","onChangeMonthConfirmed","plan","days","ppr","updatePlan","updateDays","updatePpr","onCreateNewMonthConfirmed","addNewMonth","imgSrc","toilets","spinner"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { \n  //Button, \n  BtnTypes, \n  Menu, \n  MenuItem, \n  ErrorBoundary, \n  ProductionTable,\n  Spinner,\n  Modal,\n  NewMonthForm,\n  ChangeMonthForm\n} from '../components';\n\nimport Button from '@material-ui/core/Button';\n\nimport { DBServiceContext } from '../App';\nimport { WorkMonth, Products } from '../models';\n\nimport napkinsImg from '../assets/napkins.webp';\nimport toiletsImg from '../assets/toilets.webp';\nimport './ProductionPage.css';\n\n\nexport const ProductionPage = () => {\n  const [month, setMonth] = useState({} as WorkMonth);\n  const [loading, setLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n\n\n  const {product} = useParams();\n  const dbService = useContext(DBServiceContext);\n\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setLoading(false);\n    })();\n  }, [])\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  }\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  }\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  }\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  }\n\n  const onChangeMonthConfirmed = (plan: number, days: number, ppr: number) => {\n    (async () => {\n      await dbService.updatePlan(product, plan);\n      await dbService.updateDays(product, days);\n      await dbService.updatePpr(product, ppr);\n      setChangeMonthModalOpened(false);\n    })();\n  }\n\n  const onCreateNewMonthConfirmed = async (month: WorkMonth) => {\n    await dbService.addNewMonth(month.product, month.plan, month.days, 0);\n    setModalOpened(false);\n  }\n\n  const imgSrc = product === Products.toilets ? toiletsImg : napkinsImg;\n  const spinner = () => {\n    return (\n      <div className=\"spinner-container\">\n      <Spinner imgSrc={imgSrc}/> \n      </div>\n      )\n  }\n  return (\n    <ErrorBoundary>\n    {\n      loading \n      ? spinner()\n      : <section className=\"production-page__container\" data-theme=\"light\">\n      <nav className=\"navigation__container\">\n      <li className=\"navigation-item\">\n      <Button variant=\"outlined\" color=\"primary\" href=\"/\">\n      Назад\n      </Button>\n      </li>\n      <li className=\"navigation-item\">\n      <Button variant=\"outlined\" color=\"default\" onClick={onModalToggle}>\n      Новый месяц\n      </Button>\n      </li>\n      <li className=\"navigation-item\">\n      <Button variant=\"outlined\" color=\"default\" onClick={onChangeMonthModalToggle}>\n      Изменить месяц\n      </Button>\n      </li>\n      </nav>\n\n      <ProductionTable month={month}/>\n      </section>\n    }\n\n    <Modal opened={modalOpened} \n    children={<NewMonthForm canceled={onCreateNewMonthCanceled} \n    confirmed={onCreateNewMonthConfirmed} \n    product={product} />} \n    closed={onCreateNewMonthCanceled}/>\n\n    <Modal opened={changeMonthModalOpened} \n    children={<ChangeMonthForm canceled={onChangeMonthCanceled} \n    confirmed={onChangeMonthConfirmed} \n    month={month} />} \n    closed={onChangeMonthCanceled} />\n    </ErrorBoundary>\n    );\n}"]},"metadata":{},"sourceType":"module"}
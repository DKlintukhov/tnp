{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx\";\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport Paper from '@material-ui/core/Paper';\nimport './ProductionTable.css';\nexport const ProductionTable = props => {\n  const {\n    month\n  } = props;\n  return /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: \"production-table__table\",\n    stickyHeader: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }\n  }, \"\\u041F\\u043B\\u0430\\u043D\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 14\n    }\n  }, \"\\u041E\\u0441\\u0442\\u0430\\u0442\\u043E\\u043A\")), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }\n  }, month.plan), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }\n  }, \"32000\")), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 14\n    }\n  }, \"\\u041A\\u043E\\u044D\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043D\\u0442\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }\n  }, \"\\u0421\\u0440\\u0435\\u0434\\u043D\\u0435\\u0435 \\u0432 \\u0441\\u043C\\u0435\\u043D\\u0443\")), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 14\n    }\n  }, \"1.1\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }\n  }, \"2400\")), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 14\n    }\n  }, \"\\u0427\\u0430\\u0441\\u044B \\u041F\\u041F\\u0420\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 14\n    }\n  }, month.ppr)), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }\n  }, \"\\u0421\\u0440\\u0435\\u0434\\u043D\\u0435\\u0435 \\u0441 \\u041F\\u041F\\u0420\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 14\n    }\n  }, \"2480\")), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }\n  }, \"\\u0421\\u043C\\u0435\\u043D\\u0430\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 14\n    }\n  }, \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }, month.workDays.map(workDay => /*#__PURE__*/React.createElement(TableRow, {\n    key: workDay.day,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }\n  }, workDay.day), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }\n  }, workDay.amount)))), /*#__PURE__*/React.createElement(TableFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    variant: \"head\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 14\n    }\n  }, \"\\u0414\\u043B\\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u044F \\u043F\\u043B\\u0430\\u043D\\u0430 \\u043D\\u0443\\u0436\\u043D\\u043E \\u0434\\u0435\\u043B\\u0430\\u0442\\u044C \\u043F\\u043E:\"), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"production-table__cell\",\n    variant: \"head\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 14\n    }\n  }, \"2520\")))));\n}; // const getKForToilets = (avg: number) => {\n//   if (avg > 22700 && avg < 26000) {\n//     return 1.1;\n//   }\n//   if (avg > 26000 && avg < 27000) {\n//     return 1.2;\n//   }\n//   if (avg > 27000) {\n//     return 1.25;\n//   }\n//   return 1.0;\n// }\n// const getKForNapkins = (avg: number) => {\n//   if (avg > 2100 && avg < 2401) {\n//     return 1.1;\n//   }\n//   if (avg > 2400 && avg < 2501) {\n//     return 1.2;\n//   }\n//   if (avg > 2500) {\n//     return 1.25;\n//   }\n//   return 1.0;\n// }\n//   const onWorkDayChange = (day: number) => {\n//     return async (amount: string) => {\n//       const m = {...month};\n//       m.workDays[day].amount = + amount || 0;\n//       setMonth(m);\n//       remainToDoChanged(m);\n//       avgChanged(m);\n//       avgWithPprChanged(m);\n//       onNeedsToDoChange(m);\n//       onKChange(m);\n//       await dbService.updateDay(product, day, + amount)\n//     }\n//   }\n//   const remainToDoChanged = (m: WorkMonth) => {\n//     const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     setRemainToDo(res > 0 ? res : 0);\n//   }\n//   const onPlanChange = async (p: string) => {\n//     await dbService.updatePlan(product, + p);\n//     const m = {...month};\n//     m.plan = + p;\n//     setMonth(m);\n//     remainToDoChanged(m);\n//   }\n//   const avgChanged = (m: WorkMonth) => {\n//     let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     res = Math.round(res / (finished || 1));\n//     setAvg(res);\n//   }\n//   const avgWithPprChanged = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(\n//       m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n//       );\n//     setAvgWithPpr(avg);\n//   }\n//   const onPprChange = async (p: string) => {\n//     await dbService.updatePpr(product, + p);\n//     const m = {...month};\n//     m.ppr = + p;\n//     setMonth(m);\n//     avgWithPprChanged(m);\n//     onKChange(m);\n//   }\n//   const onNeedsToDoChange = (m: WorkMonth) => {\n//     const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const res = Math.round(remainToDo / ((m.days - finished) || 1));\n//     setNeedsToDo(res > 0 ? res : 0);\n//   }\n//   const onKChange = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n//     if (m.product === Products.napkins)\n//       setK(getKForNapkins(avg));\n//     if (m.product === Products.toilets)\n//       setK(getKForToilets(avg));\n//   }\n//   const onDaysChange = async (days: String) => {\n//     await dbService.updateDays(product, + days);\n//     const m = {...month};\n//     m.days = + days;\n//     m.workDays = m.workDays.slice(0, + days);\n//     updateAllData(m);\n//   }\n//   const onAddNewDay = async () => {\n//     const m = {...month};\n//     const day = m.workDays?.length || 0;\n//     m.workDays?.push({\n//       day,\n//       amount: 0\n//     });\n//     await dbService.addWorkDay(product, day, 0);\n//     updateAllData(m);\n//   }\n//   const onDeleteDay = (id: number) => {\n//     return async () => {\n//       const m = {...month};\n//       const day = m.workDays.length;\n//       m.workDays.pop();\n//       await dbService.deleteWorkDay(product, day);\n//       updateAllData(m);\n//     }\n//   }\n//   const updateAllData = (m: WorkMonth) => {\n//     setMonth(m);\n//     remainToDoChanged(m);\n//     avgChanged(m);\n//     avgWithPprChanged(m);\n//     onNeedsToDoChange(m);\n//     onKChange(m);\n//   }","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx"],"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableFooter","Paper","ProductionTable","props","month","plan","ppr","workDays","map","workDay","day","amount"],"mappings":"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":["import React, { useState } from 'react';\n\nimport { WorkMonth } from '../../models';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter  from '@material-ui/core/TableFooter';\nimport Paper from '@material-ui/core/Paper';\n\nimport './ProductionTable.css';\n\ninterface Props {\n\tmonth: WorkMonth;\n}\n\nexport const ProductionTable = (props: Props) => {\n\tconst {month} = props;\n\treturn (\n\t\t<TableContainer component={Paper}>\n\t      <Table className=\"production-table__table\" stickyHeader>\n\n\t        <TableHead>\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">План</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Остаток</TableCell>\n\t          </TableRow>\n\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">{month.plan}</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">32000</TableCell>\n\t          </TableRow>\n\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Коэффициент</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Среднее в смену</TableCell>\n\t          </TableRow>\n\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">1.1</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">2400</TableCell>\n\t          </TableRow>\n\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Часы ППР</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">{month.ppr}</TableCell>\n\t          </TableRow>\n\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Среднее с ППР</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">2480</TableCell>\n\t          </TableRow>\n\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Смена</TableCell>\n\t            <TableCell className=\"production-table__cell\" align=\"center\">Количество</TableCell>\n\t          </TableRow>\n\n\t        </TableHead>\n\n\t        <TableBody>\n\t          {month.workDays.map((workDay) => (\n\t            <TableRow key={workDay.day}>\n\t              <TableCell className=\"production-table__cell\" align=\"center\">\n\t                {workDay.day}\n\t              </TableCell>\n\t              <TableCell className=\"production-table__cell\" align=\"center\">{workDay.amount}</TableCell>\n\t            </TableRow>\n\t          ))}\n\t        </TableBody>\n\n\t        <TableFooter>\n\t          <TableRow>\n\t            <TableCell className=\"production-table__cell\" variant=\"head\" align=\"center\">Для выполнения плана нужно делать по:</TableCell>\n\t            <TableCell className=\"production-table__cell\" variant=\"head\" align=\"center\">2520</TableCell>\n\t          </TableRow>\n\t        </TableFooter>\n\t      </Table>\n\t    </TableContainer>\n\t)\n}\n\n\n// const getKForToilets = (avg: number) => {\n//   if (avg > 22700 && avg < 26000) {\n//     return 1.1;\n//   }\n\n//   if (avg > 26000 && avg < 27000) {\n//     return 1.2;\n//   }\n\n//   if (avg > 27000) {\n//     return 1.25;\n//   }\n\n//   return 1.0;\n// }\n\n// const getKForNapkins = (avg: number) => {\n//   if (avg > 2100 && avg < 2401) {\n//     return 1.1;\n//   }\n//   if (avg > 2400 && avg < 2501) {\n//     return 1.2;\n//   }\n\n//   if (avg > 2500) {\n//     return 1.25;\n//   }\n\n//   return 1.0;\n// }\n\n\n//   const onWorkDayChange = (day: number) => {\n//     return async (amount: string) => {\n//       const m = {...month};\n//       m.workDays[day].amount = + amount || 0;\n\n//       setMonth(m);\n//       remainToDoChanged(m);\n//       avgChanged(m);\n//       avgWithPprChanged(m);\n//       onNeedsToDoChange(m);\n//       onKChange(m);\n//       await dbService.updateDay(product, day, + amount)\n//     }\n//   }\n\n//   const remainToDoChanged = (m: WorkMonth) => {\n//     const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     setRemainToDo(res > 0 ? res : 0);\n//   }\n\n//   const onPlanChange = async (p: string) => {\n//     await dbService.updatePlan(product, + p);\n//     const m = {...month};\n//     m.plan = + p;\n//     setMonth(m);\n//     remainToDoChanged(m);\n//   }\n\n//   const avgChanged = (m: WorkMonth) => {\n//     let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     res = Math.round(res / (finished || 1));\n//     setAvg(res);\n//   }\n\n//   const avgWithPprChanged = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(\n//       m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n//       );\n//     setAvgWithPpr(avg);\n//   }\n\n//   const onPprChange = async (p: string) => {\n//     await dbService.updatePpr(product, + p);\n//     const m = {...month};\n//     m.ppr = + p;\n//     setMonth(m);\n//     avgWithPprChanged(m);\n//     onKChange(m);\n//   }\n\n//   const onNeedsToDoChange = (m: WorkMonth) => {\n//     const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const res = Math.round(remainToDo / ((m.days - finished) || 1));\n//     setNeedsToDo(res > 0 ? res : 0);\n//   }\n\n//   const onKChange = (m: WorkMonth) => {\n//     const finished = getFinishedWorkDays(m.workDays);\n//     const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n//     if (m.product === Products.napkins)\n//       setK(getKForNapkins(avg));\n\n//     if (m.product === Products.toilets)\n//       setK(getKForToilets(avg));\n//   }\n\n//   const onDaysChange = async (days: String) => {\n//     await dbService.updateDays(product, + days);\n//     const m = {...month};\n//     m.days = + days;\n//     m.workDays = m.workDays.slice(0, + days);\n//     updateAllData(m);\n//   }\n\n//   const onAddNewDay = async () => {\n//     const m = {...month};\n//     const day = m.workDays?.length || 0;\n//     m.workDays?.push({\n//       day,\n//       amount: 0\n//     });\n//     await dbService.addWorkDay(product, day, 0);\n//     updateAllData(m);\n//   }\n\n//   const onDeleteDay = (id: number) => {\n//     return async () => {\n//       const m = {...month};\n//       const day = m.workDays.length;\n//       m.workDays.pop();\n//       await dbService.deleteWorkDay(product, day);\n//       updateAllData(m);\n//     }\n//   }\n\n//   const updateAllData = (m: WorkMonth) => {\n//     setMonth(m);\n//     remainToDoChanged(m);\n//     avgChanged(m);\n//     avgWithPprChanged(m);\n//     onNeedsToDoChange(m);\n//     onKChange(m);\n//   }"]},"metadata":{},"sourceType":"module"}
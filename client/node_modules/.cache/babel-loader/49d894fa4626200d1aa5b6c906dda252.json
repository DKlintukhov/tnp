{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ErrorBoundary } from '../components';\nimport { Button, CircularProgress } from '@material-ui/core/';\nimport { DBServiceContext } from '../App';\nimport './ProductionPage.css';\nexport const ProductionPage = () => {\n  const {\n    product\n  } = useParams();\n  const dbService = useContext(DBServiceContext);\n  const [month, setMonth] = useState({\n    product,\n    days: 0,\n    plan: 0,\n    ppr: 0,\n    workDays: []\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setIsLoading(false);\n    })();\n  }, [product]);\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  };\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  };\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  };\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"production-page__spinner-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      size: \"12rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(ErrorBoundary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"TABLE\"));\n};","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/pages/ProductionPage.tsx"],"names":["React","useState","useEffect","useContext","useParams","ErrorBoundary","Button","CircularProgress","DBServiceContext","ProductionPage","product","dbService","month","setMonth","days","plan","ppr","workDays","isLoading","setIsLoading","modalOpened","setModalOpened","changeMonthModalOpened","setChangeMonthModalOpened","m","getMonth","onModalToggle","onCreateNewMonthCanceled","onChangeMonthModalToggle","onChangeMonthCanceled"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAAeC,SAAf,QAAgC,kBAAhC;AAEA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,MAAT,EAAiBC,gBAAjB,QAAyC,oBAAzC;AAEA,SAASC,gBAAT,QAAiC,QAAjC;AAEA,OAAO,sBAAP;AAGA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAM;AAACC,IAAAA;AAAD,MAAYN,SAAS,EAA3B;AACA,QAAMO,SAAS,GAAGR,UAAU,CAACK,gBAAD,CAA5B;AAEA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC;AACjCS,IAAAA,OADiC;AAEjCI,IAAAA,IAAI,EAAE,CAF2B;AAGjCC,IAAAA,IAAI,EAAE,CAH2B;AAIjCC,IAAAA,GAAG,EAAE,CAJ4B;AAKjCC,IAAAA,QAAQ,EAAE;AALuB,GAAD,CAAlC;AAOA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACqB,sBAAD,EAAyBC,yBAAzB,IAAsDtB,QAAQ,CAAC,KAAD,CAApE;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMsB,CAAC,GAAG,MAAMb,SAAS,CAACc,QAAV,CAAmBf,OAAnB,CAAhB;AACAG,MAAAA,QAAQ,CAACW,CAAD,CAAR;AACAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJD;AAKD,GANQ,EAMN,CAACT,OAAD,CANM,CAAT;;AAQA,QAAMgB,aAAa,GAAG,MAAM;AAC1BL,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAIA,QAAMO,wBAAwB,GAAG,MAAM;AACrCN,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,QAAMO,wBAAwB,GAAG,MAAM;AACrCL,IAAAA,yBAAyB,CAAC,CAACD,sBAAF,CAAzB;AACD,GAFD;;AAIA,QAAMO,qBAAqB,GAAG,MAAM;AAClCN,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,GAFD;;AAIA,MAAIL,SAAJ,EAAe;AACb,wBACE;AAAK,MAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAED,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,KAAK,EAAC,SAAjC;AAA2C,IAAA,IAAI,EAAC,GAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANF,CADF;AAUD,CAzDM","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { ErrorBoundary } from '../components';\nimport { Button, CircularProgress } from '@material-ui/core/';\n\nimport { DBServiceContext } from '../App';\nimport { WorkMonth, Products } from '../models';\nimport './ProductionPage.css';\n\n\nexport const ProductionPage = () => {\n  const {product} = useParams();\n  const dbService = useContext(DBServiceContext);\n\n  const [month, setMonth] = useState({\n    product,\n    days: 0,\n    plan: 0,\n    ppr: 0,\n    workDays: []\n  } as WorkMonth);\n  const [isLoading, setIsLoading] = useState(true);\n  const [modalOpened, setModalOpened] = useState(false);\n  const [changeMonthModalOpened, setChangeMonthModalOpened] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const m = await dbService.getMonth(product);\n      setMonth(m);\n      setIsLoading(false);\n    })();\n  }, [product]);\n\n  const onModalToggle = () => {\n    setModalOpened(!modalOpened);\n  }\n\n  const onCreateNewMonthCanceled = () => {\n    setModalOpened(false);\n  }\n\n  const onChangeMonthModalToggle = () => {\n    setChangeMonthModalOpened(!changeMonthModalOpened);\n  }\n\n  const onChangeMonthCanceled = () => {\n    setChangeMonthModalOpened(false);\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"production-page__spinner-container\">\n        <CircularProgress size={\"12rem\"} />\n      </div> \n    )\n  }\n\n  return (\n    <ErrorBoundary>\n      <nav>\n        <Button variant=\"outlined\" color=\"primary\" href=\"/\">\n          Назад\n        </Button>\n      </nav>\n      <h2>TABLE</h2>\n    </ErrorBoundary>\n  );\n}"]},"metadata":{},"sourceType":"module"}
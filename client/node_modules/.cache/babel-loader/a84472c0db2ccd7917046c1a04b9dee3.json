{"ast":null,"code":"var _jsxFileName = \"/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ProductionTable.css';\nimport { Products } from '../../models';\nimport { DBServiceContext } from '../../App';\n\nconst getKForToilets = avg => {\n  if (avg > 22700 && avg < 26000) {\n    return 1.1;\n  }\n\n  if (avg > 26000 && avg < 27000) {\n    return 1.2;\n  }\n\n  if (avg > 27000) {\n    return 1.25;\n  }\n\n  return 1.0;\n};\n\nconst getKForNapkins = avg => {\n  if (avg > 2100 && avg < 2401) {\n    return 1.1;\n  }\n\n  if (avg > 2400 && avg < 2501) {\n    return 1.2;\n  }\n\n  if (avg > 2500) {\n    return 1.25;\n  }\n\n  return 1.0;\n};\n\nconst getFinishedWorkDays = workDays => {\n  if (!workDays) return 0;\n  let days = 0;\n  workDays.forEach(d => {\n    if (d.amount > 0) ++days;\n  });\n  return days;\n};\n\nexport const ProductionTable = props => {\n  const [remainToDo, setRemainToDo] = useState(0);\n  const [avg, setAvg] = useState(0);\n  const [avgWithPpr, setAvgWithPpr] = useState(0);\n  const [needsToDo, setNeedsToDo] = useState(0);\n  const [k, setK] = useState(0);\n  const dbService = useContext(DBServiceContext);\n  const {\n    product\n  } = useParams();\n  const [month, setMonth] = useState({\n    product,\n    ppr: 0,\n    days: 0,\n    plan: 0,\n    workDays: []\n  });\n  useEffect(() => {\n    const m = props.month;\n    updateAllData(m);\n  }, [props.month]);\n\n  const onWorkDayChange = day => {\n    return async amount => {\n      const m = { ...month\n      };\n      m.workDays[day].amount = +amount || 0;\n      setMonth(m);\n      remainToDoChanged(m);\n      avgChanged(m);\n      avgWithPprChanged(m);\n      onNeedsToDoChange(m);\n      onKChange(m);\n      await dbService.updateDay(product, day, +amount);\n    };\n  };\n\n  const remainToDoChanged = m => {\n    var _m$workDays;\n\n    const res = m.plan - ((_m$workDays = m.workDays) === null || _m$workDays === void 0 ? void 0 : _m$workDays.reduce((acc, d) => acc + d.amount, 0)) || 0;\n    setRemainToDo(res > 0 ? res : 0);\n  };\n\n  const onPlanChange = async p => {\n    await dbService.updatePlan(product, +p);\n    const m = { ...month\n    };\n    m.plan = +p;\n    setMonth(m);\n    remainToDoChanged(m);\n  };\n\n  const avgChanged = m => {\n    var _m$workDays2;\n\n    let res = ((_m$workDays2 = m.workDays) === null || _m$workDays2 === void 0 ? void 0 : _m$workDays2.reduce((acc, d) => acc + d.amount, 0)) || 0;\n    const finished = getFinishedWorkDays(m.workDays);\n    res = Math.round(res / (finished || 1));\n    setAvg(res);\n  };\n\n  const avgWithPprChanged = m => {\n    var _m$workDays3;\n\n    const finished = getFinishedWorkDays(m.workDays);\n    const avg = Math.round(((_m$workDays3 = m.workDays) === null || _m$workDays3 === void 0 ? void 0 : _m$workDays3.reduce((acc, d) => acc + d.amount, 0)) || 0 / (finished - m.ppr / 10 || 1));\n    setAvgWithPpr(avg);\n  };\n\n  const onPprChange = async p => {\n    await dbService.updatePpr(product, +p);\n    const m = { ...month\n    };\n    m.ppr = +p;\n    setMonth(m);\n    avgWithPprChanged(m);\n    onKChange(m);\n  };\n\n  const onNeedsToDoChange = m => {\n    var _m$workDays4;\n\n    const remainToDo = m.plan - ((_m$workDays4 = m.workDays) === null || _m$workDays4 === void 0 ? void 0 : _m$workDays4.reduce((acc, d) => acc + d.amount, 0)) || 0;\n    const finished = getFinishedWorkDays(m.workDays);\n    const res = Math.round(remainToDo / (m.days - finished || 1));\n    setNeedsToDo(res > 0 ? res : 0);\n  };\n\n  const onKChange = m => {\n    var _m$workDays5;\n\n    const finished = getFinishedWorkDays(m.workDays);\n    const avg = Math.round(((_m$workDays5 = m.workDays) === null || _m$workDays5 === void 0 ? void 0 : _m$workDays5.reduce((acc, d) => acc + d.amount, 0)) || 0 / (finished - m.ppr / 10 || 1));\n    if (m.product === Products.napkins) setK(getKForNapkins(avg));\n    if (m.product === Products.toilets) setK(getKForToilets(avg));\n  };\n\n  const onDaysChange = async days => {\n    await dbService.updateDays(product, +days);\n    const m = { ...month\n    };\n    m.days = +days;\n    m.workDays = m.workDays.slice(0, +days);\n    updateAllData(m);\n  };\n\n  const onAddNewDay = async () => {\n    var _m$workDays6, _m$workDays7;\n\n    const m = { ...month\n    };\n    const day = ((_m$workDays6 = m.workDays) === null || _m$workDays6 === void 0 ? void 0 : _m$workDays6.length) || 0;\n    (_m$workDays7 = m.workDays) === null || _m$workDays7 === void 0 ? void 0 : _m$workDays7.push({\n      day,\n      amount: 0\n    });\n    await dbService.addWorkDay(product, day, 0);\n    updateAllData(m);\n  };\n\n  const onDeleteDay = id => {\n    return async () => {\n      const m = { ...month\n      };\n      const day = m.workDays.length;\n      m.workDays.pop();\n      await dbService.deleteWorkDay(product, day);\n      updateAllData(m);\n    };\n  };\n\n  const updateAllData = m => {\n    setMonth(m);\n    remainToDoChanged(m);\n    avgChanged(m);\n    avgWithPprChanged(m);\n    onNeedsToDoChange(m);\n    onKChange(m);\n  };\n\n  return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 10\n    }\n  }, \"TABLE\"); // return (\n  //   <table className=\"production-table\" data-theme=\"light\">\n  //   <thead className=\"production-table__thead\">\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">План</th>\n  //   <th className=\"production-table__td\">Остаток</th>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(month.plan || 0)} changed={onPlanChange}/>\n  //   </td>\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(remainToDo)} disabled={true}/>\n  //   </td>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">Коэффициент</th>\n  //   <th className=\"production-table__td\">Среднее в смену</th>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(k)} disabled={true}/>\n  //   </td>\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(avg)} disabled={true}/>\n  //   </td>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">Часы ППР</th>\n  //   <th className=\"production-table__td\">Среднее с ППР</th>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(month.ppr || 0)} changed={onPprChange}/>\n  //   </td>\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(avgWithPpr)} disabled={true}/>\n  //   </td>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">Смена</th>\n  //   <th className=\"production-table__td\">Количество</th>\n  //   </tr>\n  //   </thead>\n  //   <tbody className=\"production-table_tbody\">\n  //   { month.workDays?.map((workDay, i) => {\n  //     return (\n  //       <tr key={i} className=\"production-table__tr\">\n  //       <td className=\"production-table__td\">\n  //       <InputField type={'text'} value={String(workDay.day + 1)} disabled={true}/>\n  //       </td>\n  //       <td className=\"production-table__td\">\n  //       <InputField type={'text'} value={String(workDay.amount)} changed={onWorkDayChange(workDay.day)}/>\n  //       </td>\n  //       <TableDataCell value={String(workDay.amount)} \n  //       changed={onWorkDayChange(workDay.day)}\n  //       deleteConfirmed={onDeleteDay(workDay.day)}/>\n  //       </tr>\n  //       )\n  //   })\n  // }\n  // </tbody>\n  // <tfoot className=\"production-table__tfoot\">\n  // <tr className=\"production-table__tr\">\n  // <th className=\"production-table__td\">Для выполнения плана нужно делать по:</th>\n  // <th className=\"production-table__td\"><InputField type={'text'} value={String(needsToDo)} disabled={true}/></th>\n  // </tr>\n  // </tfoot>\n  // </table>\n  // )\n};","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/components/ProductionTable/ProductionTable.tsx"],"names":["React","useState","useEffect","useContext","useParams","Products","DBServiceContext","getKForToilets","avg","getKForNapkins","getFinishedWorkDays","workDays","days","forEach","d","amount","ProductionTable","props","remainToDo","setRemainToDo","setAvg","avgWithPpr","setAvgWithPpr","needsToDo","setNeedsToDo","k","setK","dbService","product","month","setMonth","ppr","plan","m","updateAllData","onWorkDayChange","day","remainToDoChanged","avgChanged","avgWithPprChanged","onNeedsToDoChange","onKChange","updateDay","res","reduce","acc","onPlanChange","p","updatePlan","finished","Math","round","onPprChange","updatePpr","napkins","toilets","onDaysChange","updateDays","slice","onAddNewDay","length","push","addWorkDay","onDeleteDay","id","pop","deleteWorkDay"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './ProductionTable.css';\n\nimport { WorkMonth, WorkDay, Products } from '../../models';\n\nimport { DBServiceContext } from '../../App';\n\ninterface Props {\n  month: WorkMonth;\n}\n\nconst getKForToilets = (avg: number) => {\n  if (avg > 22700 && avg < 26000) {\n    return 1.1;\n  }\n\n  if (avg > 26000 && avg < 27000) {\n    return 1.2;\n  }\n\n  if (avg > 27000) {\n    return 1.25;\n  }\n\n  return 1.0;\n}\n\nconst getKForNapkins = (avg: number) => {\n  if (avg > 2100 && avg < 2401) {\n    return 1.1;\n  }\n  if (avg > 2400 && avg < 2501) {\n    return 1.2;\n  }\n\n  if (avg > 2500) {\n    return 1.25;\n  }\n\n  return 1.0;\n}\n\nconst getFinishedWorkDays = (workDays: WorkDay[]): number => {\n  if (!workDays) return 0;\n  let days = 0;\n  workDays.forEach((d: WorkDay) => {\n    if (d.amount > 0)\n      ++days;\n  });\n\n  return days;\n}\n\nexport const ProductionTable = (props: Props) => {\n  const [remainToDo, setRemainToDo] = useState(0);\n  const [avg, setAvg] = useState(0);\n  const [avgWithPpr, setAvgWithPpr] = useState(0);\n  const [needsToDo, setNeedsToDo] = useState(0);\n  const [k, setK] = useState(0);\n\n  const dbService = useContext(DBServiceContext);\n  const {product} = useParams();\n  const [month, setMonth] = useState({\n    product,\n    ppr: 0,\n    days: 0,\n    plan: 0,\n    workDays: []\n  } as WorkMonth);\n\n  useEffect(() => {\n    const m = props.month;\n    updateAllData(m);\n  }, [props.month])\n\n  const onWorkDayChange = (day: number) => {\n    return async (amount: string) => {\n      const m = {...month};\n      m.workDays[day].amount = + amount || 0;\n\n      setMonth(m);\n      remainToDoChanged(m);\n      avgChanged(m);\n      avgWithPprChanged(m);\n      onNeedsToDoChange(m);\n      onKChange(m);\n      await dbService.updateDay(product, day, + amount)\n    }\n  }\n\n  const remainToDoChanged = (m: WorkMonth) => {\n    const res = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n    setRemainToDo(res > 0 ? res : 0);\n  }\n\n  const onPlanChange = async (p: string) => {\n    await dbService.updatePlan(product, + p);\n    const m = {...month};\n    m.plan = + p;\n    setMonth(m);\n    remainToDoChanged(m);\n  }\n\n  const avgChanged = (m: WorkMonth) => {\n    let res = m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n    const finished = getFinishedWorkDays(m.workDays);\n    res = Math.round(res / (finished || 1));\n    setAvg(res);\n  }\n\n  const avgWithPprChanged = (m: WorkMonth) => {\n    const finished = getFinishedWorkDays(m.workDays);\n    const avg = Math.round(\n      m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1),\n      );\n    setAvgWithPpr(avg);\n  }\n\n  const onPprChange = async (p: string) => {\n    await dbService.updatePpr(product, + p);\n    const m = {...month};\n    m.ppr = + p;\n    setMonth(m);\n    avgWithPprChanged(m);\n    onKChange(m);\n  }\n\n  const onNeedsToDoChange = (m: WorkMonth) => {\n    const remainToDo = m.plan - m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0;\n    const finished = getFinishedWorkDays(m.workDays);\n    const res = Math.round(remainToDo / ((m.days - finished) || 1));\n    setNeedsToDo(res > 0 ? res : 0);\n  }\n\n  const onKChange = (m: WorkMonth) => {\n    const finished = getFinishedWorkDays(m.workDays);\n    const avg = Math.round(m.workDays?.reduce((acc, d) => acc + d.amount, 0) || 0 / ((finished - m.ppr / 10) || 1));\n    if (m.product === Products.napkins)\n      setK(getKForNapkins(avg));\n\n    if (m.product === Products.toilets)\n      setK(getKForToilets(avg));\n  }\n\n  const onDaysChange = async (days: String) => {\n    await dbService.updateDays(product, + days);\n    const m = {...month};\n    m.days = + days;\n    m.workDays = m.workDays.slice(0, + days);\n    updateAllData(m);\n  }\n\n  const onAddNewDay = async () => {\n    const m = {...month};\n    const day = m.workDays?.length || 0;\n    m.workDays?.push({\n      day,\n      amount: 0\n    });\n    await dbService.addWorkDay(product, day, 0);\n    updateAllData(m);\n  }\n\n  const onDeleteDay = (id: number) => {\n    return async () => {\n      const m = {...month};\n      const day = m.workDays.length;\n      m.workDays.pop();\n      await dbService.deleteWorkDay(product, day);\n      updateAllData(m);\n    }\n  }\n\n  const updateAllData = (m: WorkMonth) => {\n    setMonth(m);\n    remainToDoChanged(m);\n    avgChanged(m);\n    avgWithPprChanged(m);\n    onNeedsToDoChange(m);\n    onKChange(m);\n  }\n\n  return <h2>TABLE</h2>\n\n  // return (\n  //   <table className=\"production-table\" data-theme=\"light\">\n  //   <thead className=\"production-table__thead\">\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">План</th>\n  //   <th className=\"production-table__td\">Остаток</th>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(month.plan || 0)} changed={onPlanChange}/>\n  //   </td>\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(remainToDo)} disabled={true}/>\n  //   </td>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">Коэффициент</th>\n  //   <th className=\"production-table__td\">Среднее в смену</th>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(k)} disabled={true}/>\n  //   </td>\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(avg)} disabled={true}/>\n  //   </td>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">Часы ППР</th>\n  //   <th className=\"production-table__td\">Среднее с ППР</th>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(month.ppr || 0)} changed={onPprChange}/>\n  //   </td>\n  //   <td className=\"production-table__td\">\n  //   <InputField type={'text'} value={String(avgWithPpr)} disabled={true}/>\n  //   </td>\n  //   </tr>\n  //   <tr className=\"production-table__tr\">\n  //   <th className=\"production-table__td\">Смена</th>\n  //   <th className=\"production-table__td\">Количество</th>\n  //   </tr>\n  //   </thead>\n  //   <tbody className=\"production-table_tbody\">\n  //   { month.workDays?.map((workDay, i) => {\n  //     return (\n  //       <tr key={i} className=\"production-table__tr\">\n\n  //       <td className=\"production-table__td\">\n  //       <InputField type={'text'} value={String(workDay.day + 1)} disabled={true}/>\n  //       </td>\n  //       <td className=\"production-table__td\">\n  //       <InputField type={'text'} value={String(workDay.amount)} changed={onWorkDayChange(workDay.day)}/>\n  //       </td>\n  //       <TableDataCell value={String(workDay.amount)} \n  //       changed={onWorkDayChange(workDay.day)}\n  //       deleteConfirmed={onDeleteDay(workDay.day)}/>\n  //       </tr>\n  //       )\n  //   })\n  // }\n\n  // </tbody>\n  // <tfoot className=\"production-table__tfoot\">\n  // <tr className=\"production-table__tr\">\n  // <th className=\"production-table__td\">Для выполнения плана нужно делать по:</th>\n  // <th className=\"production-table__td\"><InputField type={'text'} value={String(needsToDo)} disabled={true}/></th>\n  // </tr>\n  // </tfoot>\n  // </table>\n  // )\n}\n"]},"metadata":{},"sourceType":"module"}
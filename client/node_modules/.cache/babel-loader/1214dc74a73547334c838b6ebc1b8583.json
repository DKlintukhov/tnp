{"ast":null,"code":"export class DBService {\n  constructor() {\n    this.url = 'http://localhost:4000/api';\n  }\n\n  async addNewMonth(product, plan, days, ppr) {\n    const res = await fetch(`${this.url}/month/${product}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product,\n        plan,\n        days,\n        ppr\n      })\n    });\n  }\n\n  async getMonth(p) {\n    try {\n      const res = await fetch(`${this.url}/month/${p}`);\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${this.url}/month/${p}` + `, received ${res.status}`);\n      }\n\n      const result = await res.json();\n      return result;\n    } catch (e) {\n      console.log(e.message);\n      return await {};\n    }\n  }\n\n  async updateDay(product, day, amount) {\n    const res = await fetch(`${this.url}/day/${product}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product,\n        day,\n        amount\n      })\n    });\n  }\n\n  async updateDays(product, days) {\n    const res = await fetch(`${this.url}/days/${product}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        days\n      })\n    });\n  }\n\n  async updatePlan(product, plan) {\n    const res = await fetch(`${this.url}/plan/${product}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product,\n        plan\n      })\n    });\n  }\n\n  async updatePpr(product, ppr) {\n    const res = await fetch(`${this.url}/ppr/${product}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product,\n        ppr\n      })\n    });\n  }\n\n  async addWorkDay(product, day, amount) {\n    const res = await fetch(`${this.url}/day/${product}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product,\n        day,\n        amount\n      })\n    });\n  }\n\n  async deleteWorkDay(product, day) {\n    const res = await fetch(`${this.url}/day/${product}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product,\n        day\n      })\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/lightmare/Documents/dev/web/tnp_plan/client/src/services/DBService.ts"],"names":["DBService","url","addNewMonth","product","plan","days","ppr","res","fetch","method","headers","body","JSON","stringify","getMonth","p","ok","Error","status","result","json","e","console","log","message","updateDay","day","amount","updateDays","updatePlan","updatePpr","addWorkDay","deleteWorkDay"],"mappings":"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","sourcesContent":["import { WorkMonth, Products } from '../models';\n\nexport class DBService {\n\tprivate readonly url = 'http://localhost:4000/api';\n\n\tpublic async addNewMonth(product: Products, plan: number, days: number, ppr: number) {\n\t\tconst res = await fetch(`${this.url}/month/${product}`, {\n\t\t\tmethod: 'PUT',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({product, plan, days, ppr})\n\t\t})\n\t\t\n\t}\n\n\tpublic async getMonth(p: Products): Promise<WorkMonth> {\n\t\ttry {\n\t\t\tconst res = await fetch(`${this.url}/month/${p}`);\n\n\t\t    if (!res.ok) {\n\t\t      throw new Error(`Could not fetch ${this.url}/month/${p}` +\n\t\t        `, received ${res.status}`)\n\t\t    }\n\n\t\t    const result = await res.json()\n\t\t    return result;\n\n\t\t} catch (e) {\n\t\t\tconsole.log(e.message);\n\t\t\treturn await {} as WorkMonth;\n\t\t}\n\t\t\n\t}\n\n\tpublic async updateDay(product: Products, day: number, amount: number) {\n\t\tconst res = await fetch(`${this.url}/day/${product}`, {\n\t\t\tmethod: 'PUT',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({product, day, amount})\n\t\t})\n\t}\n\n\tpublic async updateDays(product: Products, days: number) {\n\t\tconst res = await fetch(`${this.url}/days/${product}`, {\n\t\t\tmethod: 'PUT',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({days})\n\t\t})\n\t}\n\n\tpublic async updatePlan(product: Products, plan: number) {\n\t\tconst res = await fetch(`${this.url}/plan/${product}`, {\n\t\t\tmethod: 'PUT',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({product, plan})\n\t\t})\n\t}\n\n\tpublic async updatePpr(product: Products, ppr: number) {\n\t\tconst res = await fetch(`${this.url}/ppr/${product}`, {\n\t\t\tmethod: 'PUT',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({product, ppr})\n\t\t})\n\t}\n\n\tpublic async addWorkDay(product: Products, day: number, amount: number) {\n\t\tconst res = await fetch(`${this.url}/day/${product}`, {\n\t\t\tmethod: 'POST',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({product, day, amount})\n\t\t})\n\t}\n\n\tpublic async deleteWorkDay(product: Products, day: number) {\n\t\tconst res = await fetch(`${this.url}/day/${product}`, {\n\t\t\tmethod: 'DELETE',\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t    },\n\t\t    body: JSON.stringify({product, day})\n\t\t})\n\t}\n}"]},"metadata":{},"sourceType":"module"}